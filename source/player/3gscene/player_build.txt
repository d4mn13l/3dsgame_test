includes: 

#include "3dsgame.hpp" 
#include "build/knight.h" 

nodes: 

CharacterBody Player { 
monitoring = true ; 
monitorable = true ; 

collision_layer = PL_PLAYER ; 
collision_mask = PL_WALLS | PL_PLAYER | PL_ENEMIES | PL_COINS ; 


float gravity = 7.0 ; 
float jump_velocity = 220.0 ; 
float speed = 150.0 ; 

Vector2 velocity ; 

AnimatedSprite* panimated_sprite ; 


protected void _ready ( ) { 
enable ( ) ; 
NodePath as_path = NodePath ( "AnimatedSprite" ) ; 
panimated_sprite = dynamic_cast<AnimatedSprite*> ( get_pnode ( as_path ) ) ; 
CharacterBody::_ready ( ) ; 
} 


protected void _tick ( float delta ) { 
CharacterBody::_tick ( delta ) ; 

handle_movement_input ( ) ; 
handle_animations ( ) ; 

move_and_collide ( velocity * delta ) ; 

update_on_things ( ) ; 

OLOG ( std::to_string ( on_floor ) + std::to_string ( on_wall ) + std::to_string ( on_ceiling ) ) ; 
} 


private void handle_movement_input ( ) { 
u32 keys_held = hidKeysHeld ( ) ; 

if ( keys_held & KEY_LEFT ) { 
velocity.x = -speed ; 
} 
if ( keys_held & KEY_RIGHT ) { 
velocity.x = speed ; 
} 
else if ( ! ( keys_held & KEY_LEFT ) ) { 
velocity.x = 0 ; 
} 

if ( ( keys_held & KEY_A ) && on_floor ) { 
velocity.y = -jump_velocity ; 
} 

if ( on_floor && velocity.y >= 0 ) { 
velocity.y = 0 ; 
} 
else { 
velocity.y += gravity ; 
} 

} 


private void handle_animations ( ) { 
if ( velocity.x != 0 || velocity.y != 0 ) { 
panimated_sprite->play ( "run" ) ; 
if ( velocity.x > 0 ) { 
panimated_sprite->set_flip_x ( 1 ) ; 
} 
else if ( velocity.x < 0 ) { 
panimated_sprite->set_flip_x ( -1 ) ; 
} 
} 
else { 
panimated_sprite->play ( "idle" ) ; 
} 
} 

} 



RectangleShape PlayerShape { 


PlayerShape ( ) { 
size = Vector2 ( 10 , 16 ) ; 
name = "Shape" ; 
} 

virtual void _ready ( ) { 
RectangleShape::_ready ( ) ; 
} 
} 



AnimatedSprite PlayerSprite { 
name = "AnimatedSprite" ; 
scale = Vector2 ( 2 , 2 ) ; 


PlayerSprite ( ) { 
OLOG ( "initing PlayerSprite" ) ; 
Animation idle = Animation ( "idle" , std::vector<int> { 8 , 9 , 10 , 11 } , 0.2 , true ) ; 
Animation run = Animation ( "run" , knight_run1_idx , knight_run16_idx , 0.2 , true ) ; 
Animation roll = Animation ( "roll" , knight_roll1_idx , knight_roll8_idx , 0.2 , true ) ; 
SpriteFrames frames = SpriteFrames ( "romfs:/gfx/knight.t3x" , std::vector<Animation> { idle , run , roll } ) ; 
set_sprite_frames ( frames ) ; 
play ( "idle" ) ; 
} 


void _ready ( ) { 
AnimatedSprite::_ready ( ) ; 
move ( Vector2 ( 0 , -8 ) ) ; 
} 
} 



Camera PlayerCamera { 



PlayerCamera ( ) { 
name = "PlayerCamera" 
set_screen ( TOP_SCREEN ) ; 
activate ( ) ; 
} 

virtual void move_globally ( Vector2 by ) { 
Camera::move_globally ( by ) ; 
} 

virtual void _ready ( ) { 
Camera::_ready ( ) ; 
} 
} 



layout: 
Player { 
PlayerSprite 
PlayerShape 
PlayerCamera 
} 
