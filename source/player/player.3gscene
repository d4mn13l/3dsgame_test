includes:

#include "3dsgame.hpp"
#include "build/knight.h"
#include "bases/damageable.hpp"

nodes:

CharacterBody Damageable Player {
	name = "Player";
	monitoring = true;
	monitorable = true;

	do_unclip = true;
	do_update_on_things = true;
	
	collision_layer = PL_PLAYER;
	collision_mask = PL_WALLS | PL_PLAYER | PL_COINS;


	float gravity = 7.0;
	float jump_velocity = 220.0;
	float speed = 150.0;

	Vector2 velocity;

	AnimatedSprite* panimated_sprite;


	protected void _ready() {
		OUT("readying player");
		enable();
		NodePath as_path = NodePath("PlayerSprite");
		panimated_sprite = get_pnode<AnimatedSprite>(as_path);
		CharacterBody::_ready();
		OUT("readyied player");
	}


	protected void _tick(float delta) {
		CharacterBody::_tick(delta);

//		OUT(vector_to_string(position));

		handle_movement_input();
		handle_animations();
	
		move_and_collide(velocity * delta);
//		OUT(std::to_string(on_floor) + std::to_string(on_wall) + std::to_string(on_ceiling));
	}


	private void handle_movement_input() {
		u32 keys_held = hidKeysHeld();

		if (keys_held & KEY_LEFT) {
			velocity.x = -speed;
		} 
		if (keys_held & KEY_RIGHT) {
			velocity.x = speed;
		} else if (!(keys_held & KEY_LEFT)) {
			velocity.x = 0;
		}
	
		if ((get_pinput_server()->is_action_just_pressed(KEY_A)) && on_floor) {
			velocity.y = -jump_velocity;
		}

		if (get_pinput_server()->is_action_just_released(KEY_A) && velocity.y < 0) {
			velocity.y = 0;
		}

		if (on_ceiling && velocity.y <= 0) {
			velocity.y = gravity;
		}

	
		if (on_floor && velocity.y >= 0) {
			velocity.y = 0;
		} else {
			velocity.y += gravity;
		}

		Camera* ac = get_prendering_server()->get_active_pcamera(TOP_SCREEN);

		if (get_pinput_server()->is_action_pressed(KEY_B)) {
			ac->set_scale(ac->get_scale() + 0.05);
		}
		if (get_pinput_server()->is_action_pressed(KEY_X)) {
			ac->set_scale(ac->get_scale() - 0.05);
		}


//		OUT("moving by " + std::to_string(velocity.x) + ", " + std::to_string(velocity.y));
	}

	
	private void handle_animations() {
		if (velocity.x != 0 || velocity.y != 0) {
			panimated_sprite->play("run");
			if (velocity.x > 0) {
				panimated_sprite->set_flip_x(1);
			} else if (velocity.x < 0) {
				panimated_sprite->set_flip_x(-1);
			}
		} else {
			panimated_sprite->play("idle");
		}		
	}


	virtual void take_damage(float amout) {
		OUT("ouch");
	}

}



RectangleShape PlayerShape {
	name = "PlayerShape"

	PlayerShape() {
		set_size(Vector2(20, 32));
		name = "Shape";
	}

	virtual void _ready() {
		RectangleShape::_ready();
	}
}



AnimatedSprite PlayerSprite {
	name = "PlayerSprite";
	scale = Vector2(2, 2);


	PlayerSprite() {
		OUT("initing PlayerSprite");
		Animation idle = Animation("idle", std::vector<int> {8,9,10,11}, 0.2, true);
		Animation run = Animation("run", knight_run1_idx, knight_run16_idx, 0.2, true);
		Animation roll = Animation("roll", knight_roll1_idx, knight_roll8_idx, 0.2, true);		
		SpriteFrames frames = SpriteFrames("romfs:/gfx/knight.t3x", std::vector<Animation> {idle, run, roll});
		set_sprite_frames(frames);
		play("idle");
	}


	void _ready() {
		AnimatedSprite::_ready();
		move(Vector2(0, -8));
	}


	virtual void _tick(float delta) {
		AnimatedSprite::_tick(delta);
	}
}



Camera PlayerCamera {
	PlayerCamera() {
		name = "PlayerCamera"
		set_screen(TOP_SCREEN);
//		set_scale(Vector2(1,1));
	}

	virtual void move_globally(Vector2 by) {
		Camera::move_globally(by);
	}

	virtual void _ready() {
		Camera::_ready();
		activate();		
	}
}



layout:
Player {
	PlayerSprite
	PlayerShape
	PlayerCamera
}